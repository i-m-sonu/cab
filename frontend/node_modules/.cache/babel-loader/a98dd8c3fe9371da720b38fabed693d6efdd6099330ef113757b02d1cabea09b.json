{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const cabService = {\n  getAllCabs: () => api.get('/cabs'),\n  getCabById: id => api.get(`/cabs/${id}`),\n  createCab: cabData => api.post('/cabs', cabData),\n  updateCab: (id, cabData) => api.put(`/cabs/${id}`, cabData),\n  deleteCab: id => api.delete(`/cabs/${id}`),\n  checkAvailability: (cabId, startTime, endTime) => api.post('/cabs/check-availability', {\n    cabId,\n    startTime,\n    endTime\n  })\n};\nexport const bookingService = {\n  getAllBookings: () => api.get('/bookings'),\n  getBookingById: id => api.get(`/bookings/${id}`),\n  getBookingByBookingId: bookingId => api.get(`/bookings/booking/${bookingId}`),\n  createBooking: bookingData => api.post('/bookings', bookingData),\n  updateBookingStatus: (id, status) => api.patch(`/bookings/${id}/status`, {\n    status\n  }),\n  calculateRoute: (source, destination) => api.post('/bookings/calculate', {\n    source,\n    destination\n  }),\n  getSources: () => api.get('/bookings/locations/sources'),\n  getDestinations: source => api.get(`/bookings/locations/destinations/${source}`),\n  getUserBookings: email => api.get(`/bookings/user/${email}`)\n};\nexport const routeService = {\n  getAllRoutes: () => api.get('/routes'),\n  createRoute: routeData => api.post('/routes', routeData),\n  updateRoute: (id, routeData) => api.put(`/routes/${id}`, routeData),\n  deleteRoute: id => api.delete(`/routes/${id}`),\n  initializeRoutes: () => api.post('/routes/initialize')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","data","message","cabService","getAllCabs","get","getCabById","id","createCab","cabData","post","updateCab","put","deleteCab","delete","checkAvailability","cabId","startTime","endTime","bookingService","getAllBookings","getBookingById","getBookingByBookingId","bookingId","createBooking","bookingData","updateBookingStatus","status","patch","calculateRoute","source","destination","getSources","getDestinations","getUserBookings","email","routeService","getAllRoutes","createRoute","routeData","updateRoute","deleteRoute","initializeRoutes"],"sources":["/Users/sonukumar/Desktop/cab/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const cabService = {\n  getAllCabs: () => api.get('/cabs'),\n  getCabById: (id) => api.get(`/cabs/${id}`),\n  createCab: (cabData) => api.post('/cabs', cabData),\n  updateCab: (id, cabData) => api.put(`/cabs/${id}`, cabData),\n  deleteCab: (id) => api.delete(`/cabs/${id}`),\n  checkAvailability: (cabId, startTime, endTime) => \n    api.post('/cabs/check-availability', { cabId, startTime, endTime }),\n};\n\nexport const bookingService = {\n  getAllBookings: () => api.get('/bookings'),\n  getBookingById: (id) => api.get(`/bookings/${id}`),\n  getBookingByBookingId: (bookingId) => api.get(`/bookings/booking/${bookingId}`),\n  createBooking: (bookingData) => api.post('/bookings', bookingData),\n  updateBookingStatus: (id, status) => api.patch(`/bookings/${id}/status`, { status }),\n  calculateRoute: (source, destination) => \n    api.post('/bookings/calculate', { source, destination }),\n  getSources: () => api.get('/bookings/locations/sources'),\n  getDestinations: (source) => api.get(`/bookings/locations/destinations/${source}`),\n  getUserBookings: (email) => api.get(`/bookings/user/${email}`),\n};\n\nexport const routeService = {\n  getAllRoutes: () => api.get('/routes'),\n  createRoute: (routeData) => api.post('/routes', routeData),\n  updateRoute: (id, routeData) => api.put(`/routes/${id}`, routeData),\n  deleteRoute: (id) => api.delete(`/routes/${id}`),\n  initializeRoutes: () => api.post('/routes/initialize'),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}