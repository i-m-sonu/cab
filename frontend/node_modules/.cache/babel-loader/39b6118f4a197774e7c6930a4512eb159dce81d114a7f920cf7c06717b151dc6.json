{"ast":null,"code":"var _jsxFileName = \"/Users/sonukumar/Desktop/cab/frontend/src/theme/ThemeProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { CssBaseline } from '@mui/material';\nimport { createAppTheme } from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  darkMode: false,\n  toggleTheme: () => {}\n});\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AppThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [darkMode, setDarkMode] = useState(() => {\n    const saved = localStorage.getItem('cab-app-dark-mode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  useEffect(() => {\n    localStorage.setItem('cab-app-dark-mode', JSON.stringify(darkMode));\n  }, [darkMode]);\n  const toggleTheme = () => {\n    setDarkMode(prev => !prev);\n  };\n  const theme = createAppTheme(darkMode ? 'dark' : 'light');\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s2(AppThemeProvider, \"T5Q8+yPnHXACi83PcAXhDUY07JI=\");\n_c = AppThemeProvider;\nexport default AppThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"AppThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ThemeProvider","CssBaseline","createAppTheme","jsxDEV","_jsxDEV","ThemeContext","darkMode","toggleTheme","useTheme","_s","context","Error","AppThemeProvider","children","_s2","setDarkMode","saved","localStorage","getItem","JSON","parse","setItem","stringify","prev","theme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sonukumar/Desktop/cab/frontend/src/theme/ThemeProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { CssBaseline } from '@mui/material';\nimport { createAppTheme } from './theme';\n\nconst ThemeContext = createContext({\n  darkMode: false,\n  toggleTheme: () => {},\n});\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const AppThemeProvider = ({ children }) => {\n  const [darkMode, setDarkMode] = useState(() => {\n    const saved = localStorage.getItem('cab-app-dark-mode');\n    return saved ? JSON.parse(saved) : false;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('cab-app-dark-mode', JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  const toggleTheme = () => {\n    setDarkMode(prev => !prev);\n  };\n\n  const theme = createAppTheme(darkMode ? 'dark' : 'light');\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleTheme }}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default AppThemeProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,cAAc,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,gBAAGT,aAAa,CAAC;EACjCU,QAAQ,EAAE,KAAK;EACfC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGb,UAAU,CAACQ,YAAY,CAAC;EACxC,IAAI,CAACK,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACR,QAAQ,EAAES,WAAW,CAAC,GAAGjB,QAAQ,CAAC,MAAM;IAC7C,MAAMkB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IACvD,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,KAAK;EAC1C,CAAC,CAAC;EAEFjB,SAAS,CAAC,MAAM;IACdkB,YAAY,CAACI,OAAO,CAAC,mBAAmB,EAAEF,IAAI,CAACG,SAAS,CAAChB,QAAQ,CAAC,CAAC;EACrE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBQ,WAAW,CAACQ,IAAI,IAAI,CAACA,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMC,KAAK,GAAGtB,cAAc,CAACI,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;EAEzD,oBACEF,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,QAAQ;MAAEC;IAAY,CAAE;IAAAM,QAAA,eACtDT,OAAA,CAACJ,aAAa;MAACwB,KAAK,EAAEA,KAAM;MAAAX,QAAA,gBAC1BT,OAAA,CAACH,WAAW;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACdjB,QAAQ;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE5B,CAAC;AAAChB,GAAA,CAxBWF,gBAAgB;AAAAmB,EAAA,GAAhBnB,gBAAgB;AA0B7B,eAAeA,gBAAgB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}